name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  pr-info:
    name: PR Information
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR info
      id: pr-info
      run: |
        echo "pr-number=${{ github.event.number }}" >> $GITHUB_OUTPUT
        echo "pr-title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
        echo "pr-author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
        echo "base-branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
        echo "head-branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

    - name: Display PR information
      run: |
        echo "## Pull Request Information"
        echo "- **Number:** ${{ steps.pr-info.outputs.pr-number }}"
        echo "- **Title:** ${{ steps.pr-info.outputs.pr-title }}"
        echo "- **Author:** ${{ steps.pr-info.outputs.pr-author }}"
        echo "- **Base Branch:** ${{ steps.pr-info.outputs.base-branch }}"
        echo "- **Head Branch:** ${{ steps.pr-info.outputs.head-branch }}"

  changed-files:
    name: Analyze Changed Files
    runs-on: ubuntu-latest

    outputs:
      manifest-changed: ${{ steps.changes.outputs.manifest-changed }}
      src-changed: ${{ steps.changes.outputs.src-changed }}
      build-changed: ${{ steps.changes.outputs.build-changed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changes
      run: |
        # Get list of changed files
        git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD > changed_files.txt

        echo "Changed files:"
        cat changed_files.txt

        # Check for specific types of changes
        manifest_changed="false"
        src_changed="false"
        build_changed="false"

        if grep -q "manifest.*\.json" changed_files.txt; then
          manifest_changed="true"
        fi

        if grep -q "^src/" changed_files.txt; then
          src_changed="true"
        fi

        if grep -q -E "(build\.sh|package\.json)" changed_files.txt; then
          build_changed="true"
        fi

        echo "manifest-changed=$manifest_changed" >> $GITHUB_OUTPUT
        echo "src-changed=$src_changed" >> $GITHUB_OUTPUT
        echo "build-changed=$build_changed" >> $GITHUB_OUTPUT

  title-validation:
    name: Validate PR Title
    runs-on: ubuntu-latest

    steps:
    - name: Check PR title format
      run: |
        title="${{ github.event.pull_request.title }}"
        echo "PR Title: $title"

        # Check if title follows conventional commit format
        if echo "$title" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|build|ci)(\(.+\))?: .+"; then
          echo "‚úÖ PR title follows conventional commit format"
        else
          echo "‚ö†Ô∏è PR title doesn't follow conventional commit format"
          echo "Expected format: type(scope): description"
          echo "Types: feat, fix, docs, style, refactor, test, chore, build, ci"
          echo "Example: feat(popup): add volume control slider"
        fi

        # Check title length
        if [ ${#title} -gt 72 ]; then
          echo "‚ö†Ô∏è PR title is quite long (${#title} characters). Consider shortening it."
        fi

        # Check for common issues
        if echo "$title" | grep -qi "wip\|work in progress"; then
          echo "‚ö†Ô∏è PR appears to be work in progress"
        fi

  description-validation:
    name: Validate PR Description
    runs-on: ubuntu-latest

    steps:
    - name: Check PR description
      run: |
        description="${{ github.event.pull_request.body }}"

        if [ -z "$description" ]; then
          echo "‚ö†Ô∏è PR has no description. Consider adding:"
          echo "- What changes were made"
          echo "- Why the changes were necessary"
          echo "- How to test the changes"
          echo "- Any breaking changes or migration steps"
        else
          echo "‚úÖ PR has a description"

          # Check for common sections
          if echo "$description" | grep -qi "test"; then
            echo "‚úÖ PR description mentions testing"
          else
            echo "‚ÑπÔ∏è Consider adding testing information to the PR description"
          fi

          if echo "$description" | grep -qi "break"; then
            echo "‚ö†Ô∏è PR description mentions breaking changes - ensure this is properly communicated"
          fi
        fi

  security-check:
    name: Security Check for PR
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.src-changed == 'true' || needs.changed-files.outputs.manifest-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for sensitive changes
      run: |
        echo "Checking for potentially sensitive changes..."

        # Check if permissions were added in manifest
        if [ "${{ needs.changed-files.outputs.manifest-changed }}" == "true" ]; then
          git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -- manifest*.json > manifest_diff.txt

          if grep -q '+".*"' manifest_diff.txt | grep -E "permissions|host_permissions"; then
            echo "‚ö†Ô∏è PR adds new permissions - please review carefully:"
            grep '+".*"' manifest_diff.txt | grep -E "permissions|host_permissions" || true
          fi

          if grep -q '+.*"<all_urls>"' manifest_diff.txt; then
            echo "üö® PR adds broad URL access - requires security review"
          fi
        fi

        # Check for potential security issues in source code
        if [ "${{ needs.changed-files.outputs.src-changed }}" == "true" ]; then
          echo "Checking source code changes for security issues..."

          # Check for added eval usage
          if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -- src/ | grep -q '+.*eval('; then
            echo "üö® PR adds eval() usage - security risk!"
          fi

          # Check for added innerHTML usage
          if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -- src/ | grep -q '+.*innerHTML'; then
            echo "‚ö†Ô∏è PR adds innerHTML usage - ensure content is sanitized"
          fi

          # Check for external URLs
          if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD -- src/ | grep -qE '\+.*https?://'; then
            echo "‚ö†Ô∏è PR adds external URL references - review for security"
          fi
        fi

  build-test:
    name: Test Build with PR Changes
    runs-on: ubuntu-latest
    needs: changed-files
    if: needs.changed-files.outputs.src-changed == 'true' || needs.changed-files.outputs.manifest-changed == 'true' || needs.changed-files.outputs.build-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Make build script executable
      run: chmod +x build.sh

    - name: Test build
      run: |
        echo "Testing build with PR changes..."
        ./build.sh

        # Check if build succeeded
        if [ -d "build" ] && [ "$(ls -A build)" ]; then
          echo "‚úÖ Build completed successfully"
          ls -la build/
        else
          echo "‚ùå Build failed or produced no output"
          exit 1
        fi

    - name: Validate built extensions
      run: |
        echo "Validating built extension packages..."

        VERSION=$(grep '"version"' manifest.json | cut -d'"' -f4)

        # Check Firefox build
        if [ -f "build/lyra-firefox-$VERSION.xpi" ]; then
          echo "‚úÖ Firefox extension built successfully"

          # Basic validation of XPI structure
          unzip -t "build/lyra-firefox-$VERSION.xpi" > /dev/null
          if [ $? -eq 0 ]; then
            echo "‚úÖ Firefox XPI is valid"
          else
            echo "‚ùå Firefox XPI is corrupted"
            exit 1
          fi
        else
          echo "‚ùå Firefox extension build missing"
          exit 1
        fi

        # Check Chrome build
        if [ -f "build/lyra-chrome-$VERSION.zip" ]; then
          echo "‚úÖ Chrome extension built successfully"

          # Basic validation of ZIP structure
          unzip -t "build/lyra-chrome-$VERSION.zip" > /dev/null
          if [ $? -eq 0 ]; then
            echo "‚úÖ Chrome ZIP is valid"
          else
            echo "‚ùå Chrome ZIP is corrupted"
            exit 1
          fi
        else
          echo "‚ùå Chrome extension build missing"
          exit 1
        fi

  size-check:
    name: Check Extension Size
    runs-on: ubuntu-latest
    needs: [changed-files, build-test]
    if: needs.changed-files.outputs.src-changed == 'true' || needs.changed-files.outputs.manifest-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build extensions
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Check extension sizes
      run: |
        echo "Checking extension package sizes..."

        VERSION=$(grep '"version"' manifest.json | cut -d'"' -f4)

        # Check Firefox extension size
        if [ -f "build/lyra-firefox-$VERSION.xpi" ]; then
          firefox_size=$(stat -c%s "build/lyra-firefox-$VERSION.xpi")
          firefox_size_mb=$(echo "scale=2; $firefox_size/1024/1024" | bc)
          echo "Firefox extension size: ${firefox_size} bytes (${firefox_size_mb} MB)"

          # Warn if extension is getting large
          if [ $firefox_size -gt 5242880 ]; then  # 5MB
            echo "‚ö†Ô∏è Firefox extension is quite large (>5MB)"
          fi
        fi

        # Check Chrome extension size
        if [ -f "build/lyra-chrome-$VERSION.zip" ]; then
          chrome_size=$(stat -c%s "build/lyra-chrome-$VERSION.zip")
          chrome_size_mb=$(echo "scale=2; $chrome_size/1024/1024" | bc)
          echo "Chrome extension size: ${chrome_size} bytes (${chrome_size_mb} MB)"

          # Warn if extension is getting large
          if [ $chrome_size -gt 5242880 ]; then  # 5MB
            echo "‚ö†Ô∏è Chrome extension is quite large (>5MB)"
          fi
        fi

  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [pr-info, changed-files, title-validation, description-validation, security-check, build-test, size-check]
    if: always()

    steps:
    - name: Generate PR validation summary
      run: |
        echo "# PR Validation Summary"
        echo ""
        echo "**PR #${{ github.event.number }}:** ${{ github.event.pull_request.title }}"
        echo "**Author:** ${{ github.event.pull_request.user.login }}"
        echo ""
        echo "## Validation Results"
        echo "- Changed Files Analysis: ${{ needs.changed-files.result }}"
        echo "- Title Validation: ${{ needs.title-validation.result }}"
        echo "- Description Validation: ${{ needs.description-validation.result }}"
        echo "- Security Check: ${{ needs.security-check.result }}"
        echo "- Build Test: ${{ needs.build-test.result }}"
        echo "- Size Check: ${{ needs.size-check.result }}"
        echo ""
        echo "## Change Summary"
        echo "- Manifest files changed: ${{ needs.changed-files.outputs.manifest-changed }}"
        echo "- Source code changed: ${{ needs.changed-files.outputs.src-changed }}"
        echo "- Build files changed: ${{ needs.changed-files.outputs.build-changed }}"
        echo ""

        # Determine overall status
        if [ "${{ needs.build-test.result }}" = "failure" ] || [ "${{ needs.security-check.result }}" = "failure" ]; then
          echo "‚ùå **Overall Status: FAILED** - Critical issues found"
          exit 1
        elif [ "${{ needs.title-validation.result }}" = "failure" ] || [ "${{ needs.description-validation.result }}" = "failure" ]; then
          echo "‚ö†Ô∏è **Overall Status: PASSED WITH WARNINGS** - Consider addressing warnings"
        else
          echo "‚úÖ **Overall Status: PASSED** - All validations successful"
        fi
