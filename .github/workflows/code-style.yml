name: Code Style & Formatting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  formatting:
    name: Check Code Formatting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Prettier
      run: npm install -g prettier

    - name: Check JavaScript formatting
      run: |
        echo "Checking JavaScript file formatting..."

        # Check if .prettierrc exists, if not create a basic config
        if [ ! -f ".prettierrc" ] && [ ! -f ".prettierrc.json" ] && [ ! -f "prettier.config.js" ]; then
          echo "Creating default Prettier configuration..."
          cat > .prettierrc << EOF
        {
          "semi": true,
          "trailingComma": "es5",
          "singleQuote": false,
          "printWidth": 80,
          "tabWidth": 2,
          "useTabs": false
        }
        EOF
        fi

        # Find all JavaScript files and check formatting
        js_files=$(find src -name "*.js" 2>/dev/null || echo "")
        if [ -n "$js_files" ]; then
          echo "Found JavaScript files to check:"
          echo "$js_files"

          # Check formatting without modifying files
          if ! prettier --check $js_files; then
            echo "❌ JavaScript files are not properly formatted"
            echo "Run 'prettier --write src/*.js' to fix formatting"
            exit 1
          else
            echo "✅ JavaScript files are properly formatted"
          fi
        else
          echo "No JavaScript files found to check"
        fi

    - name: Check CSS formatting
      run: |
        echo "Checking CSS file formatting..."

        css_files=$(find src -name "*.css" 2>/dev/null || echo "")
        if [ -n "$css_files" ]; then
          echo "Found CSS files to check:"
          echo "$css_files"

          if ! prettier --check $css_files; then
            echo "❌ CSS files are not properly formatted"
            echo "Run 'prettier --write src/*.css' to fix formatting"
            exit 1
          else
            echo "✅ CSS files are properly formatted"
          fi
        else
          echo "No CSS files found to check"
        fi

    - name: Check HTML formatting
      run: |
        echo "Checking HTML file formatting..."

        html_files=$(find src -name "*.html" 2>/dev/null || echo "")
        if [ -n "$html_files" ]; then
          echo "Found HTML files to check:"
          echo "$html_files"

          if ! prettier --check $html_files; then
            echo "❌ HTML files are not properly formatted"
            echo "Run 'prettier --write src/*.html' to fix formatting"
            exit 1
          else
            echo "✅ HTML files are properly formatted"
          fi
        else
          echo "No HTML files found to check"
        fi

  linting:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install ESLint
      run: |
        npm install -g eslint

        # Install common ESLint configs and plugins
        npm install -g \
          @eslint/js \
          eslint-plugin-html \
          eslint-plugin-security \
          eslint-config-standard || true

    - name: Create ESLint config if missing
      run: |
        if [ ! -f ".eslintrc.json" ] && [ ! -f ".eslintrc.js" ] && [ ! -f "eslint.config.js" ]; then
          echo "Creating default ESLint configuration..."
          cat > .eslintrc.json << 'EOF'
        {
          "env": {
            "browser": true,
            "es6": true,
            "webextensions": true
          },
          "extends": [
            "eslint:recommended"
          ],
          "parserOptions": {
            "ecmaVersion": 2020,
            "sourceType": "module"
          },
          "rules": {
            "no-unused-vars": "warn",
            "no-console": "warn",
            "no-debugger": "error",
            "no-alert": "warn",
            "no-eval": "error",
            "no-implied-eval": "error",
            "no-script-url": "error",
            "prefer-const": "warn",
            "semi": ["error", "always"],
            "quotes": ["error", "double"]
          },
          "globals": {
            "browser": "readonly",
            "chrome": "readonly"
          }
        }
        EOF
        fi

    - name: Lint JavaScript files
      run: |
        js_files=$(find src -name "*.js" 2>/dev/null || echo "")
        if [ -n "$js_files" ]; then
          echo "Linting JavaScript files..."
          echo "$js_files"

          if ! eslint $js_files; then
            echo "❌ JavaScript linting failed"
            echo "Fix the issues above or run 'eslint --fix src/*.js' to auto-fix some issues"
            exit 1
          else
            echo "✅ JavaScript files passed linting"
          fi
        else
          echo "No JavaScript files found to lint"
        fi

  manifest-style:
    name: Check Manifest Style
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check JSON formatting
      run: |
        echo "Checking manifest file formatting..."

        # Check main manifest
        if [ -f "manifest.json" ]; then
          echo "Checking manifest.json formatting..."

          # Check if it's valid JSON first
          if ! python3 -m json.tool manifest.json > /dev/null; then
            echo "❌ manifest.json is not valid JSON"
            exit 1
          fi

          # Check if it's properly formatted (2-space indentation)
          if ! python3 -m json.tool --indent 2 manifest.json > manifest.formatted.json; then
            echo "❌ Failed to format manifest.json"
            exit 1
          fi

          if ! diff -q manifest.json manifest.formatted.json > /dev/null; then
            echo "❌ manifest.json is not properly formatted"
            echo "Expected formatting:"
            head -20 manifest.formatted.json
            exit 1
          else
            echo "✅ manifest.json is properly formatted"
          fi

          rm -f manifest.formatted.json
        fi

        # Check Chrome manifest if it exists
        if [ -f "manifest.chrome.json" ]; then
          echo "Checking manifest.chrome.json formatting..."

          if ! python3 -m json.tool manifest.chrome.json > /dev/null; then
            echo "❌ manifest.chrome.json is not valid JSON"
            exit 1
          fi

          if ! python3 -m json.tool --indent 2 manifest.chrome.json > manifest.chrome.formatted.json; then
            echo "❌ Failed to format manifest.chrome.json"
            exit 1
          fi

          if ! diff -q manifest.chrome.json manifest.chrome.formatted.json > /dev/null; then
            echo "❌ manifest.chrome.json is not properly formatted"
            echo "Expected formatting:"
            head -20 manifest.chrome.formatted.json
            exit 1
          else
            echo "✅ manifest.chrome.json is properly formatted"
          fi

          rm -f manifest.chrome.formatted.json
        fi

  editorconfig:
    name: Check EditorConfig Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install editorconfig-checker
      run: |
        # Install editorconfig-checker
        LATEST_VERSION=$(curl -s "https://api.github.com/repos/editorconfig-checker/editorconfig-checker/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        curl -sSfL "https://github.com/editorconfig-checker/editorconfig-checker/releases/download/${LATEST_VERSION}/ec-linux-amd64.tar.gz" | tar -xzf -
        sudo mv bin/ec-linux-amd64 /usr/local/bin/editorconfig-checker
        chmod +x /usr/local/bin/editorconfig-checker

    - name: Check EditorConfig compliance
      run: |
        if [ -f ".editorconfig" ]; then
          echo "Checking EditorConfig compliance..."

          # Run editorconfig-checker on source files
          if ! editorconfig-checker src/ manifest*.json *.md 2>/dev/null; then
            echo "❌ Files do not comply with .editorconfig"
            echo "Please fix the formatting issues above"
            exit 1
          else
            echo "✅ All files comply with .editorconfig"
          fi
        else
          echo "ℹ️ No .editorconfig file found, skipping check"
        fi

  whitespace:
    name: Check Whitespace
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for trailing whitespace
      run: |
        echo "Checking for trailing whitespace..."

        # Find files with trailing whitespace
        if find src -type f \( -name "*.js" -o -name "*.html" -o -name "*.css" \) -exec grep -l '[[:space:]]$' {} \; | head -10; then
          echo "❌ Files with trailing whitespace found (shown above)"
          echo "Please remove trailing whitespace from these files"
          exit 1
        else
          echo "✅ No trailing whitespace found"
        fi

    - name: Check for mixed line endings
      run: |
        echo "Checking for mixed line endings..."

        # Check for files with mixed line endings (both CRLF and LF)
        mixed_files=""
        for file in $(find src -type f \( -name "*.js" -o -name "*.html" -o -name "*.css" \)); do
          if file "$file" | grep -q "CRLF"; then
            if grep -q $'\n' "$file" && grep -q $'\r\n' "$file"; then
              mixed_files="$mixed_files $file"
            fi
          fi
        done

        if [ -n "$mixed_files" ]; then
          echo "❌ Files with mixed line endings found:"
          echo "$mixed_files"
          exit 1
        else
          echo "✅ No mixed line endings found"
        fi

  auto-fix:
    name: Auto-fix Suggestions
    runs-on: ubuntu-latest
    if: failure()
    needs: [formatting, linting, manifest-style, editorconfig, whitespace]

    steps:
    - name: Provide auto-fix suggestions
      run: |
        echo "🔧 Auto-fix suggestions:"
        echo ""
        echo "To fix formatting issues locally, run:"
        echo "  npm install -g prettier eslint"
        echo "  prettier --write 'src/**/*.{js,css,html}'"
        echo "  eslint --fix 'src/**/*.js'"
        echo ""
        echo "To fix JSON formatting:"
        echo "  python3 -m json.tool --indent 2 manifest.json > temp.json && mv temp.json manifest.json"
        echo ""
        echo "To remove trailing whitespace:"
        echo "  find src -type f \\( -name '*.js' -o -name '*.html' -o -name '*.css' \\) -exec sed -i 's/[[:space:]]*$//' {} \\;"
